---
interface Props {
  text: string;
  variant?: 'default' | 'icon-only' | 'text';
  size?: 'sm' | 'md' | 'lg';
  label?: string;
  class?: string;
}

const {
  text,
  variant = 'icon-only',
  size = 'md',
  label = 'Copy to clipboard',
  class: className = ''
} = Astro.props;
---

<button
  class={`copy-button copy-button--${variant} copy-button--${size} ${className}`}
  data-copy-text={text}
  aria-label={label}
  type="button"
>
  <span class="copy-button__icon copy-button__icon--default">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
      <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
    </svg>
  </span>
  <span class="copy-button__icon copy-button__icon--success" aria-hidden="true">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <polyline points="20 6 9 17 4 12"></polyline>
    </svg>
  </span>
  {variant === 'text' && (
    <>
      <span class="copy-button__label copy-button__label--default">Copy</span>
      <span class="copy-button__label copy-button__label--success">Copied!</span>
    </>
  )}
</button>

<style scoped>
  .copy-button {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: transparent;
    border: 1px solid var(--color-border);
    color: var(--color-text-muted);
    border-radius: var(--border-radius-sm);
    cursor: pointer;
    transition: all var(--transition-fast);
    font-family: inherit;
    font-size: inherit;
    line-height: 1;
    flex-shrink: 0;
  }

  .copy-button:hover {
    border-color: var(--color-accent);
    color: var(--color-accent);
    background: rgba(59, 130, 246, 0.1);
  }

  .copy-button:focus-visible {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  .copy-button:active {
    transform: scale(0.95);
  }

  .copy-button--sm {
    padding: 0.375rem;
  }

  .copy-button--md {
    padding: 0.5rem;
  }

  .copy-button--lg {
    padding: 0.625rem;
  }

  .copy-button--text {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }

  .copy-button__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity var(--transition-fast), transform var(--transition-fast);
  }

  .copy-button__icon--success {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%) scale(0);
    opacity: 0;
  }

  .copy-button.copied .copy-button__icon--default {
    opacity: 0;
    transform: scale(0);
  }

  .copy-button.copied .copy-button__icon--success {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  .copy-button__label {
    font-size: 0.875rem;
    font-weight: 500;
    white-space: nowrap;
    transition: opacity var(--transition-fast), transform var(--transition-fast);
  }

  .copy-button__label--success {
    position: absolute;
    opacity: 0;
    transform: translateX(-0.5rem);
  }

  .copy-button.copied .copy-button__label--default {
    opacity: 0;
    transform: translateX(0.5rem);
  }

  .copy-button.copied .copy-button__label--success {
    position: static;
    opacity: 1;
    transform: translateX(0);
  }

  .copy-button.copied {
    border-color: var(--color-success);
    color: var(--color-success);
    background: rgba(16, 185, 129, 0.1);
  }

  .copy-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .copy-button:disabled:hover {
    border-color: var(--color-border);
    color: var(--color-text-muted);
    background: transparent;
  }
</style>

<script>
  function initCopyButtons() {
    var buttons = document.querySelectorAll('.copy-button[data-copy-text]');

    function handleCopyClick(event) {
      var button = event.currentTarget;
      var text = button.getAttribute('data-copy-text');

      if (!text || button.disabled) {
        return;
      }

      button.disabled = true;

      navigator.clipboard.writeText(text).then(function handleClipboardWriter() {
        button.classList.add('copied');

        setTimeout(function handleTimeout() {
          button.classList.remove('copied');
          button.disabled = false;
        }, 2000);
      }).catch(function handleClipboardError(err) {
        button.disabled = false;
      });
    }

    function handleKeyDown(event) {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        handleCopyClick(event);
      }
    }

    buttons.forEach(function handleButton(button) {
      button.addEventListener('click', handleCopyClick);
      button.addEventListener('keydown', handleKeyDown);
    });
  }

  document.addEventListener('DOMContentLoaded', initCopyButtons);
  document.addEventListener('astro:page-load', initCopyButtons);
</script>
